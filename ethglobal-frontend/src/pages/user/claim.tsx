import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { api } from "~/utils/api";

type InputRowProps = {
  label: string
  onChange: (value: string) => void
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange">

function InputRow({ label, onChange, ...rest }: InputRowProps) { 
  return (
    <div className="flex gap-4">
      <label>{label}</label>
      <input
        className="border"
        type="text"
        onChange={(e) => onChange(e.target.value)}
        {...rest}
      />
    </div>
  )
}

export default function Claim() {
  const [address, setAddress] = useState("");
  const [name, setName] = useState("");
  const [id, setId] = useState("");
  
  const submitClaim = api.user.submitClaim.useMutation();

  return (
    <>
      <Head>
        <title>Claim death</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <h3>Claim death</h3>
        <form
          onSubmit={(e) => {
            submitClaim.mutate({address, name, id})
            e.preventDefault();
          }}
          className="container flex flex-col items-center justify-center gap-4 px-4 py-16"
        >
          <div className="flex flex-col items-end">
            <InputRow label="Wallet address" value={address} onChange={setAddress} />
            <InputRow label="Name" value={name} onChange={setName} />
            <InputRow label="ID" value={id} onChange={setId} />
          </div>
          <button
            className="border p-2 w-20"
            type="submit"
          >
            Submit
          </button>
        </form>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
